name: Release

on:
  push:
    branches: [master, maint]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.semantic.outputs.released }}
      version: ${{ steps.semantic.outputs.version }}
      tag: ${{ steps.semantic.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Semantic Release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release build twine

      - name: Run Semantic Release
        id: semantic
        run: |
          if semantic-release version --print | grep -q "No release will be made"; then
            echo "released=false" >> $GITHUB_OUTPUT
            echo "No new release needed"
          else
            NEW_VERSION=$(semantic-release version --print)
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            semantic-release version
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.released == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.semantic-release.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions-${{ needs.semantic-release.outputs.version }}
          path: dist/

      # Note: GitHub release is automatically created by semantic-release
      # due to upload_to_vcs_release: true in pyproject.toml

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.semantic-release.outputs.tag }}
          files: |
            dist/*

      # Optional: Publish to PyPI
      # Uncomment the following step and add PYPI_API_TOKEN secret to enable PyPI publishing
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     verbose: true
